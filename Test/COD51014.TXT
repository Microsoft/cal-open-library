OBJECT Codeunit 51014 Test_DotNet_CryptoStream
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    Subtype=Test;
    TestPermissions=Disabled;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit Assert;

    [Test]
    [LineStart(812)]
    PROCEDURE TestCryptoOutStream@1000000000();
    VAR
      DotNet_SymmetricAlgorithm@1000000001 : Codeunit DotNet_SymmetricAlgorithm;
      DotNet_ICryptoTransform@1000000000 : Codeunit DotNet_ICryptoTransform;
      DotNet_CryptoStream@1000000005 : Codeunit DotNet_CryptoStream;
      TempBlob@1000000007 : TEMPORARY Record TempBlob;
      OStream@1000000008 : OutStream;
    BEGIN
      // [WHEN] OutStream is initialized
      Clear(TempBlob.Blob);
      TempBlob.Blob.CreateOutStream(OStream);
      // [WHEN] AES Symmetric Algorithm (with default settings) is created
      DotNet_SymmetricAlgorithm.Create('Aes');
      // [WHEN] Encryptor transform is created
      DotNet_SymmetricAlgorithm.CreateEncryptor(DotNet_ICryptoTransform);
      // [WHEN] Encrypting crypto outstream is created
      DotNet_CryptoStream.CryptoOutStream(OStream, DotNet_ICryptoTransform);
      // [THEN] Encrypting crypto outstream is not NULL
      Assert.IsTrue(DotNet_CryptoStream.CanWrite, 'CryptoStream CryptoOutStream failed');
    END;

    [Test]
    [LineStart(825)]
    PROCEDURE TestCryptoInStream@1000000001();
    VAR
      DotNet_SymmetricAlgorithm@1000000001 : Codeunit DotNet_SymmetricAlgorithm;
      DotNet_ICryptoTransform@1000000000 : Codeunit DotNet_ICryptoTransform;
      DotNet_CryptoStream@1000000005 : Codeunit DotNet_CryptoStream;
      DotNet_Array@1000000010 : Codeunit DotNet_Array;
      TempBlob@1000000004 : TEMPORARY Record TempBlob;
      IStream@1000000006 : InStream;
      Index@1000000009 : Integer;
    BEGIN
      // [WHEN] InStream is initialized
      Clear(TempBlob.Blob);
      TempBlob.WriteAsText('Lorem ipsum dolor', TEXTENCODING::UTF8);
      TempBlob.Blob.CreateInStream(IStream);
      // [WHEN] AES Symmetric Algorithm (with 256 keysize, 128 blocksize) is created)
      DotNet_SymmetricAlgorithm.Create('Aes');
      DotNet_SymmetricAlgorithm.SetKeySize(256);
      // [WHEN] Any key vector is initialized
      DotNet_Array.ByteArray(32);
      for Index := 0 to DotNet_Array.Length-1 do
        DotNet_Array.SetByteValue(Index, Index);
      DotNet_SymmetricAlgorithm.SetKey(DotNet_Array);
      // [WHEN] Any IV vector is initialized
      DotNet_Array.ByteArray(16);
      for Index := 0 to DotNet_Array.Length-1 do
        DotNet_Array.SetByteValue(Index, Index);
      DotNet_SymmetricAlgorithm.SetIV(DotNet_Array);
      // [WHEN] Decryptor transform is created
      DotNet_SymmetricAlgorithm.CreateDecryptor(DotNet_ICryptoTransform);
      // [WHEN] Decrypting crypto instream is created
      DotNet_CryptoStream.CryptoInStream(IStream, DotNet_ICryptoTransform);
      // [THEN] Decrypting crypto outstream is not NULL
      Assert.IsTrue(DotNet_CryptoStream.CanWrite, 'CryptoStream CryptoInStream failed');
    END;

    BEGIN
    END.
  }
}

