OBJECT Codeunit 50303 Test_DotNet_BinaryReaderWriter
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryLowerPermissions@1001 : Codeunit 132217;
      DotNet_BinaryReader@1002 : Codeunit 50120;
      DotNet_BinaryWriter@1003 : Codeunit 50121;
      DotNet_Stream@1004 : Codeunit 3034;
      DotNet_MemoryStream@1005 : Codeunit 3009;
      DotNet_Encoding@1006 : Codeunit 3026;
      DotNet_ByteArray@1007 : Codeunit 3000;
      DotNet_ExpectedByteArray@1008 : Codeunit 3000;
      DotNet_CharArray@1009 : Codeunit 3000;
      DotNet_ExpectedCharArray@1010 : Codeunit 3000;

    [Test]
    PROCEDURE TestWritingDifferentDataTypes@1();
    VAR
      ExpectedChar@1002 : Char;
      ExpectedBigInt@1003 : BigInteger;
      ExpectedDec@1004 : Decimal;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_Encoding.UTF32;
      CreateStream;
      DotNet_BinaryWriter.BinaryWriterWithEncoding(DotNet_Stream, DotNet_Encoding);
      DotNet_BinaryWriter.WriteChar('A');
      DotNet_BinaryWriter.WriteChar('B');
      DotNet_BinaryWriter.WriteByte(1);
      DotNet_BinaryWriter.WriteInt16(2);
      DotNet_BinaryWriter.WriteInt32(3);
      DotNet_BinaryWriter.WriteUInt16(4);
      DotNet_BinaryWriter.WriteUInt32(5);
      DotNet_BinaryWriter.WriteBoolean(TRUE);
      DotNet_BinaryWriter.WriteDecimal(6);
      DotNet_BinaryWriter.WriteString('CDE');
      CreateExampleByteArray;
      DotNet_BinaryWriter.WriteArray(DotNet_ByteArray);
      CreateExampleCharArray;
      DotNet_BinaryWriter.WriteArray(DotNet_CharArray);
      DotNet_BinaryWriter.Flush();
      ExpectedBigInt := 71;
      Assert.AreEqual(ExpectedBigInt, DotNet_Stream.Length, 'Stream length check failed');
      DotNet_Stream.Seek(0, 0);
      DotNet_BinaryReader.BinaryReaderWithEncoding(DotNet_Stream, DotNet_Encoding);
      ExpectedChar := 'A';
      Assert.AreEqual(ExpectedChar, DotNet_BinaryReader.ReadChar, 'ReadChar check failed');
      ExpectedChar := 'B';
      Assert.AreEqual(ExpectedChar, DotNet_BinaryReader.ReadChar, 'ReadChar check failed');
      Assert.AreEqual(1, DotNet_BinaryReader.ReadByte, 'ReadByte check failed');
      Assert.AreEqual(2, DotNet_BinaryReader.ReadInt16, 'ReadInt16 check failed');
      Assert.AreEqual(3, DotNet_BinaryReader.ReadInt32, 'ReadInt32 check failed');
      Assert.AreEqual(4, DotNet_BinaryReader.ReadUInt16, 'ReadUInt16 check failed');
      Assert.AreEqual(5, DotNet_BinaryReader.ReadUInt32, 'ReadUInt32 check failed');
      Assert.AreEqual(TRUE, DotNet_BinaryReader.ReadBoolean, 'ReadBoolean check failed');
      ExpectedDec := 6;
      Assert.AreEqual(ExpectedDec, DotNet_BinaryReader.ReadDecimal, 'ReadDecimal check failed');
      Assert.AreEqual('CDE', DotNet_BinaryReader.ReadString, 'ReadString check failed');
      CLEAR(DotNet_ByteArray);
      DotNet_BinaryReader.ReadBytes(4, DotNet_ByteArray);
      CheckArrayItems(DotNet_ByteArray, DotNet_ExpectedByteArray);
      CLEAR(DotNet_CharArray);
      DotNet_BinaryReader.ReadChars(4, DotNet_CharArray);
      CheckArrayItems(DotNet_CharArray, DotNet_ExpectedCharArray);

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteBool@2();
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteBoolTest
      DotNet_MemoryStream.InitMemoryStream;
      DotNet_MemoryStream.GetDotNetStream(DotNet_Stream);
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      DotNet_BinaryWriter.WriteBoolean(FALSE);
      DotNet_BinaryWriter.WriteBoolean(FALSE);
      DotNet_BinaryWriter.WriteBoolean(TRUE);
      DotNet_BinaryWriter.WriteBoolean(FALSE);
      DotNet_BinaryWriter.WriteBoolean(TRUE);
      DotNet_BinaryWriter.WriteInt32(5);
      DotNet_BinaryWriter.WriteInt32(0);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      Assert.AreEqual(FALSE, DotNet_BinaryReader.ReadBoolean(), 'Read check failed'); //false
      Assert.AreEqual(FALSE, DotNet_BinaryReader.ReadBoolean(), 'Read check failed'); //false
      Assert.AreEqual(TRUE, DotNet_BinaryReader.ReadBoolean(), 'Read check failed');  //true
      Assert.AreEqual(FALSE, DotNet_BinaryReader.ReadBoolean(), 'Read check failed'); //false
      Assert.AreEqual(TRUE, DotNet_BinaryReader.ReadBoolean(), 'Read check failed');  //true
      Assert.AreEqual(5, DotNet_BinaryReader.ReadInt32(), 'Read check failed');  //5
      Assert.AreEqual(0, DotNet_BinaryReader.ReadInt32(), 'Read check failed'); //0
      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteDecimal@3();
    VAR
      DecArr@1000 : ARRAY [13] OF Decimal;
      Index@1001 : Integer;
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteDecimalTest
      DecArr[1] := 1;
      DecArr[2] := 0;
      DecArr[3] := -1;
      DecArr[4] := -999999999999999.99;
      DecArr[5] := 999999999999999.99;
      DecArr[6] := -1000.5;
      DecArr[7] := POWER(-10.0, -40);
      DecArr[8] := POWER(3.4, -40898);
      DecArr[9] := POWER(3.4, -28);
      DecArr[10] := POWER(3.4, 28);
      DecArr[11] := 0.45;
      DecArr[12] := 5.55;
      DecArr[13] := POWER(3.4899, 23);

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(DecArr) DO
        DotNet_BinaryWriter.WriteDecimal(DecArr[Index]);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      FOR Index := 1 TO ARRAYLEN(DecArr) DO
        Assert.AreEqual(DecArr[Index], DotNet_BinaryReader.ReadDecimal, 'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteInt16@4();
    VAR
      I16Arr@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteInt16Test
      I16Arr[1] := -32768;
      I16Arr[2] := 32767;
      I16Arr[3] := 0;
      I16Arr[4] := -10000;
      I16Arr[5] := 10000;
      I16Arr[6] := -50;
      I16Arr[7] := 50;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(I16Arr) DO
        DotNet_BinaryWriter.WriteInt16(I16Arr[Index]);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      FOR Index := 1 TO ARRAYLEN(I16Arr) DO
        Assert.AreEqual(I16Arr[Index], DotNet_BinaryReader.ReadInt16, 'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteInt32@5();
    VAR
      I32Arr@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteInt32Test
      I32Arr[1] := -2147483647;
      I32Arr[1] := I32Arr[1] - 1;
      I32Arr[2] := 2147483647;
      I32Arr[3] := 0;
      I32Arr[4] := -10000;
      I32Arr[5] := 10000;
      I32Arr[6] := -50;
      I32Arr[7] := 50;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(I32Arr) DO
        DotNet_BinaryWriter.WriteInt32(I32Arr[Index]);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      FOR Index := 1 TO ARRAYLEN(I32Arr) DO
        Assert.AreEqual(I32Arr[Index], DotNet_BinaryReader.ReadInt32, 'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteUInt16@6();
    VAR
      Ui16Arr@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteUInt16Test
      Ui16Arr[1] := 0;
      Ui16Arr[2] := 65535;
      Ui16Arr[3] := 0;
      Ui16Arr[4] := 100;
      Ui16Arr[5] := 1000;
      Ui16Arr[6] := 10000;
      Ui16Arr[7] := 65535 - 100;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(Ui16Arr) DO
        DotNet_BinaryWriter.WriteUInt16(Ui16Arr[Index]);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      FOR Index := 1 TO ARRAYLEN(Ui16Arr) DO
        Assert.AreEqual(Ui16Arr[Index], DotNet_BinaryReader.ReadUInt16, 'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteUInt32@7();
    VAR
      Ui32Arr@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteUInt32Test
      Ui32Arr[1] := 0;
      Ui32Arr[2] := 2147483647;
      Ui32Arr[3] := 0;
      Ui32Arr[4] := 100;
      Ui32Arr[5] := 1000;
      Ui32Arr[6] := 10000;
      Ui32Arr[7] := 2147483647 - 100;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(Ui32Arr) DO
        DotNet_BinaryWriter.WriteUInt32(Ui32Arr[Index]);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      FOR Index := 1 TO ARRAYLEN(Ui32Arr) DO
        Assert.AreEqual(Ui32Arr[Index], DotNet_BinaryReader.ReadUInt32, 'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteString@8();
    VAR
      StrArr@1000 : ARRAY [10] OF Text;
      Index@1001 : Integer;
      str1@1002 : Text;
      sb@1003 : Codeunit 3014;
      ii@1004 : Integer;
      tempChar@1005 : Char;
    BEGIN
      //Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteStringTest
      sb.InitStringBuilder('');
      FOR ii := 1 TO 5 DO
        sb.Append('abc');
      str1 := sb.ToString;

      StrArr[1] := 'ABC';
      tempChar := 9;
      StrArr[2] := '';
      StrArr[2] += FORMAT(tempChar);
      StrArr[2] += FORMAT(tempChar);
      tempChar := 10;
      StrArr[2] += FORMAT(tempChar);
      StrArr[2] += FORMAT(tempChar);
      StrArr[2] += FORMAT(tempChar);
      tempChar := 0;
      StrArr[2] += FORMAT(tempChar);
      tempChar := 13;
      StrArr[2] += FORMAT(tempChar);
      StrArr[2] += FORMAT(tempChar);
      tempChar := 11;
      StrArr[2] += FORMAT(tempChar);
      StrArr[2] += FORMAT(tempChar);
      tempChar := 9;
      StrArr[2] += FORMAT(tempChar);
      tempChar := 0;
      StrArr[2] += FORMAT(tempChar);
      tempChar := 13;
      StrArr[2] += FORMAT(tempChar);
      StrArr[2] += 'Hello';
      StrArr[3] := 'This is a normal string';
      StrArr[4] := '12345667789!@#$%^&&())_+_)@#';
      StrArr[5] := 'ABSDAFJPIRUETROPEWTGRUOGHJDOLJHLDHWEROTYIETYWsdifhsiudyoweurscnkjhdfusiyugjlskdjfoiwueriye';
      StrArr[6] := '     ';
      StrArr[7] := '';
      tempChar := 0;
      StrArr[7] += FORMAT(tempChar);
      StrArr[7] += FORMAT(tempChar);
      StrArr[7] += FORMAT(tempChar);
      tempChar := 9;
      StrArr[7] += FORMAT(tempChar);
      StrArr[7] += FORMAT(tempChar);
      StrArr[7] += FORMAT(tempChar);
      StrArr[7] += 'Hey""';
      StrArr[8] := '';
      tempChar := 37;
      StrArr[8] += FORMAT(tempChar);
      tempChar := 17;
      StrArr[8] += FORMAT(tempChar);
      StrArr[9] := str1;
      StrArr[10] := '';

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(StrArr) DO
        DotNet_BinaryWriter.WriteString(StrArr[Index]);

      DotNet_BinaryWriter.Flush();
      DotNet_Stream.Seek(0, 0);

      FOR Index := 1 TO ARRAYLEN(StrArr) DO
        Assert.AreEqual(StrArr[Index], DotNet_BinaryReader.ReadString, 'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    LOCAL PROCEDURE CreateStream@100();
    VAR
      DotNetStream@1000 : DotNet "'mscorlib'.System.IO.Stream";
    BEGIN
      DotNet_MemoryStream.InitMemoryStream;
      DotNet_MemoryStream.GetMemoryStream(DotNetStream);
      DotNet_Stream.SetStream(DotNetStream);
    END;

    LOCAL PROCEDURE CreateExampleByteArray@101();
    VAR
      DotNetArray@1000 : DotNet "'mscorlib'.System.Array";
      DotNetByte@1001 : DotNet "'mscorlib'.System.Byte";
      DotNetConvert@1002 : DotNet "'mscorlib'.System.Convert";
    BEGIN
      DotNetArray := DotNetArray.CreateInstance(GETDOTNETTYPE(DotNetByte), 4);
      DotNetByte := DotNetConvert.ChangeType(10, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 0);
      DotNetByte := DotNetConvert.ChangeType(11, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 1);
      DotNetByte := DotNetConvert.ChangeType(12, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 2);
      DotNetByte := DotNetConvert.ChangeType(13, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 3);
      DotNet_ByteArray.SetArray(DotNetArray);
      DotNet_ExpectedByteArray.SetArray(DotNetArray);
    END;

    LOCAL PROCEDURE CreateExampleCharArray@102();
    VAR
      DotNet_String@1000 : Codeunit 3007;
    BEGIN
      DotNet_String.Set('MNOR');
      DotNet_String.ToCharArray(0, DotNet_String.Length, DotNet_CharArray);
      DotNet_String.ToCharArray(0, DotNet_String.Length, DotNet_ExpectedCharArray);
    END;

    LOCAL PROCEDURE CheckArrayItems@103(VAR ActualArray@1000 : Codeunit 3000;VAR ExpectedArray@1001 : Codeunit 3000);
    VAR
      DotNetActualArray@1002 : DotNet "'mscorlib'.System.Array";
      DotNetExpectedArray@1003 : DotNet "'mscorlib'.System.Array";
      Index@1004 : Integer;
    BEGIN
      ActualArray.GetArray(DotNetActualArray);
      ExpectedArray.GetArray(DotNetExpectedArray);
      FOR Index := 0 TO DotNetActualArray.Length - 1 DO
        Assert.AreEqual(DotNetExpectedArray.GetValue(Index), DotNetActualArray.GetValue(Index), 'Array item check failed');
    END;

    BEGIN
    END.
  }
}

