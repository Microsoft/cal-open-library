OBJECT Codeunit 50304 Test_DotNet_StreamAndBuffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryLowerPermissions@1001 : Codeunit 132217;
      DotNet_Buffer@1002 : Codeunit 50123;
      DotNet_BinaryWriter@1003 : Codeunit 50121;
      DotNet_Stream@1004 : Codeunit 50122;
      DotNet_MemoryStream@1005 : Codeunit 3009;
      DotNet_ByteArray@1007 : Codeunit 3000;
      DotNet_ExpectedByteArray@1008 : Codeunit 3000;

    [Test]
    PROCEDURE TestReadingWritingUsingMemoryStream@1();
    VAR
      ExpectedChar@1002 : Char;
      ExpectedBigInt@1003 : BigInteger;
      ExpectedDec@1004 : Decimal;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      CreateStream;
      Assert.AreEqual(TRUE, DotNet_Stream.CanRead, 'CanRead check failed');
      Assert.AreEqual(TRUE, DotNet_Stream.CanWrite, 'CanWrite check failed');
      Assert.AreEqual(TRUE, DotNet_Stream.CanSeek, 'CanSeek check failed');
      Assert.AreEqual(FALSE, DotNet_Stream.IsDotNetNull, 'Null check failed');
      DotNet_Stream.WriteByte(1);
      CreateExampleByteArray;
      DotNet_Stream.Write(DotNet_ByteArray, 0, 4);
      //Seek to the start of stream but skip first byte
      DotNet_Stream.Seek(1, 0);
      ClearActualArray;
      DotNet_Stream.Read(DotNet_ByteArray, 0, 4);
      CheckArrayItems(DotNet_ByteArray, DotNet_ExpectedByteArray);
      DotNet_Stream.Seek(0, 0);
      Assert.AreEqual(1, DotNet_Stream.ReadByte, 'ReadByte check failed');
      DotNet_Stream.Close;
      DotNet_Stream.Dispose;
    END;

    [Test]
    PROCEDURE TestReadingWritingUsingTempBlob@2();
    VAR
      TempBlob@1002 : TEMPORARY Record 99008535;
      InputData@1003 : InStream;
      OutputData@1004 : OutStream;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      TempBlob.Blob.CREATEOUTSTREAM(OutputData);
      DotNet_Stream.FromOutStream(OutputData);
      Assert.AreEqual(TRUE, DotNet_Stream.CanRead, 'CanRead check failed');
      Assert.AreEqual(TRUE, DotNet_Stream.CanWrite, 'CanWrite check failed');
      Assert.AreEqual(TRUE, DotNet_Stream.CanSeek, 'CanSeek check failed');
      Assert.AreEqual(FALSE, DotNet_Stream.IsDotNetNull, 'Null check failed');
      DotNet_Stream.WriteByte(1);
      CreateExampleByteArray;
      DotNet_Stream.Write(DotNet_ByteArray, 0, 4);
      DotNet_Stream.Close;
      DotNet_Stream.Dispose;
      TempBlob.Blob.CREATEINSTREAM(InputData);
      DotNet_Stream.FromInStream(InputData);
      Assert.AreEqual(TRUE, DotNet_Stream.CanRead, 'CanRead check failed');
      Assert.AreEqual(TRUE, DotNet_Stream.CanWrite, 'CanWrite check failed');
      Assert.AreEqual(TRUE, DotNet_Stream.CanSeek, 'CanSeek check failed');
      Assert.AreEqual(FALSE, DotNet_Stream.IsDotNetNull, 'Null check failed');
      Assert.AreEqual(1, DotNet_Stream.ReadByte, 'ReadByte check failed');
      ClearActualArray;
      DotNet_Stream.Read(DotNet_ByteArray, 0, 4);
      CheckArrayItems(DotNet_ByteArray, DotNet_ExpectedByteArray);
      DotNet_Stream.Close;
      DotNet_Stream.Dispose;
    END;

    [Test]
    PROCEDURE TestBufferMethods@3();
    VAR
      DotNetString@1002 : Codeunit 3007;
      CharArray@1003 : Codeunit 3000;
      TestChar@1004 : Char;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      TestChar := 261;
      DotNetString.Set(FORMAT(TestChar) + FORMAT(TestChar));
      DotNetString.ToCharArray(0, 2,CharArray);
      Assert.AreEqual(4, DotNet_Buffer.ByteLength(CharArray), 'ByteLength check failed');
      CreateExampleByteArray;
      Assert.AreEqual(10, DotNet_Buffer.GetByte(DotNet_ByteArray, 0), 'GetByte Check failed');
      Assert.AreEqual(11, DotNet_Buffer.GetByte(DotNet_ByteArray, 1), 'GetByte Check failed');
      Assert.AreEqual(12, DotNet_Buffer.GetByte(DotNet_ByteArray, 2), 'GetByte Check failed');
      Assert.AreEqual(13, DotNet_Buffer.GetByte(DotNet_ByteArray, 3), 'GetByte Check failed');
      Assert.AreEqual(5, DotNet_Buffer.GetByte(CharArray, 0), 'GetByte Check failed');
      Assert.AreEqual(1, DotNet_Buffer.GetByte(CharArray, 1), 'GetByte Check failed');
      Assert.AreEqual(5, DotNet_Buffer.GetByte(CharArray, 2), 'GetByte Check failed');
      Assert.AreEqual(1, DotNet_Buffer.GetByte(CharArray, 3), 'GetByte Check failed');

      DotNet_Buffer.BlockCopy(CharArray, 0, DotNet_ByteArray, 0, 4);
      Assert.AreEqual(5, DotNet_Buffer.GetByte(DotNet_ByteArray, 0), 'GetByte Check failed');
      Assert.AreEqual(1, DotNet_Buffer.GetByte(DotNet_ByteArray, 1), 'GetByte Check failed');
      Assert.AreEqual(5, DotNet_Buffer.GetByte(DotNet_ByteArray, 2), 'GetByte Check failed');
      Assert.AreEqual(1, DotNet_Buffer.GetByte(DotNet_ByteArray, 3), 'GetByte Check failed');
      DotNet_Buffer.SetByte(DotNet_ByteArray, 0, 15);
      Assert.AreEqual(15, DotNet_Buffer.GetByte(DotNet_ByteArray, 0), 'GetByte Check failed');
    END;

    LOCAL PROCEDURE CreateStream@100();
    VAR
      DotNetStream@1000 : DotNet "'mscorlib'.System.IO.Stream";
    BEGIN
      DotNet_MemoryStream.InitMemoryStream;
      DotNet_MemoryStream.GetMemoryStream(DotNetStream);
      DotNet_Stream.SetStream(DotNetStream);
    END;

    LOCAL PROCEDURE CreateExampleByteArray@101();
    VAR
      DotNetArray@1000 : DotNet "'mscorlib'.System.Array";
      DotNetByte@1001 : DotNet "'mscorlib'.System.Byte";
      DotNetConvert@1002 : DotNet "'mscorlib'.System.Convert";
    BEGIN
      DotNetArray := DotNetArray.CreateInstance(GETDOTNETTYPE(DotNetByte), 4);
      DotNetByte := DotNetConvert.ChangeType(10, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 0);
      DotNetByte := DotNetConvert.ChangeType(11, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 1);
      DotNetByte := DotNetConvert.ChangeType(12, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 2);
      DotNetByte := DotNetConvert.ChangeType(13, GETDOTNETTYPE(DotNetByte));
      DotNetArray.SetValue(DotNetByte, 3);
      DotNet_ByteArray.SetArray(DotNetArray);
      DotNet_ExpectedByteArray.SetArray(DotNetArray);
    END;

    LOCAL PROCEDURE ClearActualArray@102();
    VAR
      DotNetArray@1000 : DotNet "'mscorlib'.System.Array";
      DotNetByte@1001 : DotNet "'mscorlib'.System.Byte";
      DotNetConvert@1002 : DotNet "'mscorlib'.System.Convert";
    BEGIN
      DotNetArray := DotNetArray.CreateInstance(GETDOTNETTYPE(DotNetByte), 4);
      DotNet_ByteArray.SetArray(DotNetArray);
    END;

    LOCAL PROCEDURE CheckArrayItems@103(VAR ActualArray@1000 : Codeunit 3000;VAR ExpectedArray@1001 : Codeunit 3000);
    VAR
      DotNetActualArray@1002 : DotNet "'mscorlib'.System.Array";
      DotNetExpectedArray@1003 : DotNet "'mscorlib'.System.Array";
      Index@1004 : Integer;
    BEGIN
      ActualArray.GetArray(DotNetActualArray);
      ExpectedArray.GetArray(DotNetExpectedArray);
      FOR Index := 0 TO DotNetActualArray.Length - 1 DO
        Assert.AreEqual(DotNetExpectedArray.GetValue(Index), DotNetActualArray.GetValue(Index), 'Array item check failed');
    END;

    BEGIN
    END.
  }
}

