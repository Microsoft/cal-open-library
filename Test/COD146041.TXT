OBJECT Codeunit 146041 Test DotNet_WebClient
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      UrlSecurityErr@1001 : TextConst 'ENU=Security settings prevents download of this file.';

    [Test]
    PROCEDURE TestSuccessfulhttpDownload@1();
    VAR
      DotNet_WebClient@1000 : Codeunit 3041;
      DotNet_Array@1001 : Codeunit 3000;
      Url@1004 : Text;
    BEGIN
      // [GIVEN] A http Url
      Url := 'http://www.microsoft.com';

      // [WHEN] Downloaded with Web Client to Memory Stream
      DotNet_WebClient.WebClient;
      DotNet_WebClient.DownloadData(Url,DotNet_Array);

      // [THEN] Then data should be downloaded
      Assert.AreEqual(TRUE,DotNet_Array.Length > 0,'http Download failed!');
    END;

    [Test]
    PROCEDURE TestSuccessfulhttpsDownload@2();
    VAR
      DotNet_WebClient@1002 : Codeunit 3041;
      DotNet_Array@1001 : Codeunit 3000;
      Url@1004 : Text;
    BEGIN
      // [GIVEN] A https Url
      Url := 'https://www.microsoft.com';

      // [WHEN] Downloaded with Web Client to Memory Stream
      DotNet_WebClient.WebClient;
      DotNet_WebClient.DownloadData(Url,DotNet_Array);

      // [THEN] Then data should be downloaded
      Assert.AreEqual(TRUE,DotNet_Array.Length > 0,'https Download failed!');
    END;

    [Test]
    PROCEDURE TestFailedFileSystemDownload@3();
    VAR
      DotNet_WebClient@1002 : Codeunit 3041;
      DotNet_Array@1001 : Codeunit 3000;
      FileManagement@1000 : Codeunit 419;
      Url@1003 : Text;
    BEGIN
      // [GIVEN] A Url
      Url := FileManagement.CombinePath(APPLICATIONPATH,'CustomSettings.config');

      // [WHEN] Downloaded with Web Client to Memory Stream
      DotNet_WebClient.WebClient;
      ASSERTERROR DotNet_WebClient.DownloadData(Url,DotNet_Array);

      // [THEN] Then data download should fail
      Assert.AreEqual(UrlSecurityErr,GETLASTERRORTEXT,'Incorrect error message');
    END;

    [Test]
    PROCEDURE TestSuccessfulhttpsStringDownload@8();
    VAR
      DotNet_WebClient@1002 : Codeunit 3041;
      Content@1001 : Text;
      Url@1004 : Text;
    BEGIN
      // [GIVEN] A https Url
      Url := 'https://httpbin.org/get';

      // [WHEN] Downloaded with Web Client to Memory Stream
      DotNet_WebClient.WebClient;
      Content := DotNet_WebClient.DownloadString(Url);

      // [THEN] Then data should be downloaded
      Assert.AreEqual(TRUE,STRLEN(Content) > 0,'https Download failed!');
    END;

    [Test]
    PROCEDURE TestFailedFileSystemStringDownload@6();
    VAR
      DotNet_WebClient@1002 : Codeunit 3041;
      FileManagement@1000 : Codeunit 419;
      Content@1001 : Text;
      Url@1003 : Text;
    BEGIN
      // [GIVEN] A Url
      Url := FileManagement.CombinePath(APPLICATIONPATH,'CustomSettings.config');

      // [WHEN] Downloaded with Web Client to Memory Stream
      DotNet_WebClient.WebClient;
      ASSERTERROR Content := DotNet_WebClient.DownloadString(Url);

      // [THEN] Then data download should fail
      Assert.AreEqual(UrlSecurityErr,GETLASTERRORTEXT,'Incorrect error message');
    END;

    [Test]
    PROCEDURE TestSuccessfulhttpsDownloadWithAuthentication@7();
    VAR
      DotNet_WebClient@1002 : Codeunit 3041;
      DotNet_Array@1001 : Codeunit 3000;
      DotNet_Credential@1005 : Codeunit 3029;
      Url@1004 : Text;
    BEGIN
      // [GIVEN] A https Url and authentication
      Url := 'https://httpbin.org/basic-auth/testuser/testpassword';
      DotNet_Credential.InitCredential('testuser','testpassword');

      // [WHEN] Downloaded with Web Client to Memory Stream
      DotNet_WebClient.WebClient;
      DotNet_WebClient.Credentials(DotNet_Credential);
      DotNet_WebClient.DownloadData(Url,DotNet_Array);

      // [THEN] Then data should be downloaded
      Assert.AreEqual(TRUE,DotNet_Array.Length > 0,'Basic authentication failed!');
    END;

    [Test]
    PROCEDURE TestSuccessfulhttpsDownloadViaTempBlob@5();
    VAR
      TempBlob@1003 : Record 99008535;
      Url@1004 : Text;
    BEGIN
      // [GIVEN] A https Url
      Url := 'https://www.microsoft.com';

      // [WHEN] Downloaded with Web Client to Memory Stream
      TempBlob.TryDownloadFromUrl(Url);

      // [THEN] Then data should be downloaded
      Assert.AreEqual(TRUE,TempBlob.Blob.HASVALUE,'https Download failed!');
    END;

    [Test]
    PROCEDURE TestFailedFileSystemDownloadViaTempBlob@4();
    VAR
      TempBlob@1001 : Record 99008535;
      FileManagement@1000 : Codeunit 419;
      Url@1003 : Text;
    BEGIN
      // [GIVEN] A Url
      Url := FileManagement.CombinePath(APPLICATIONPATH,'CustomSettings.config');

      // [WHEN] Downloaded with Web Client to Memory Stream
      ASSERTERROR TempBlob.TryDownloadFromUrl(Url);

      // [THEN] Then data download should fail
      Assert.AreEqual(UrlSecurityErr,GETLASTERRORTEXT,'Incorrect error message');
    END;

    BEGIN
    END.
  }
}

