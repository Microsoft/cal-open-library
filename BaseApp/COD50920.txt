OBJECT Codeunit 50920 Json Interface Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Variables@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JSON@1000 : Text;

    [External]
    PROCEDURE Initialize@2();
    VAR
      JSONMgt@1001 : Codeunit 5459;
    BEGIN
      WITH JSONMgt DO BEGIN
        InitializeEmptyCollection;
        JSON := WriteCollectionToString;
        InitializeEmptyObject;
        GetJSONObject(Variables);
      END;
    END;

    [External]
    PROCEDURE InitializeFromTempBlob@5(TempBlob@1000 : Record 99008535);
    VAR
      JSONMgt@1001 : Codeunit 5459;
    BEGIN
      JSON := TempBlob.ReadAsTextWithCRLFLineSeparator;
    END;

    [External]
    PROCEDURE AddRecordID@3(Variant@1000 : Variant);
    VAR
      JSONMgt@1004 : Codeunit 5459;
      DataTypeMgt@1005 : Codeunit 701;
      JsonObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      RecRef@1001 : RecordRef;
    BEGIN
      IF NOT DataTypeMgt.GetRecordRef(Variant, RecRef) THEN
        EXIT;

      WITH JSONMgt DO BEGIN
        InitializeCollection(JSON);
        InitializeEmptyObject;
        GetJSONObject(JsonObject);
        AddJPropertyToJObject(JsonObject,'TableNo',RecRef.NUMBER);
        AddJPropertyToJObject(JsonObject,'TableName',RecRef.NAME);
        AddJPropertyToJObject(JsonObject,'RecordId',RecRef.RECORDID);
        AddJObjectToCollection(JsonObject);
        JSON := WriteCollectionToString;
      END;
    END;

    [External]
    PROCEDURE AddTempTable@4(TableName@1007 : Text;Variant@1000 : Variant);
    VAR
      JSONMgt@1004 : Codeunit 5459;
      DataTypeMgt@1006 : Codeunit 701;
      RecRef@1001 : RecordRef;
      JsonArray@1005 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      JsonObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TableView@1008 : Text;
    BEGIN
      IF NOT DataTypeMgt.GetRecordRef(Variant, RecRef) THEN
        EXIT;

      IF NOT RecRef.ISTEMPORARY THEN
        EXIT;

      TableView := RecRef.GETVIEW(FALSE);
      RecRef.RESET;

      WITH JSONMgt DO BEGIN
        InitializeEmptyCollection;
        GetJsonArray(JsonArray);
        IF RecRef.FINDSET THEN REPEAT
          InitializeEmptyObject;
          GetJSONObject(JsonObject);
          PopulateJsonFromAnyTable(RecRef,JsonObject);
          AddJObjectToJArray(JsonArray,JsonObject);
        UNTIL RecRef.NEXT = 0;
        InitializeCollection(JSON);
        InitializeEmptyObject;
        GetJSONObject(JsonObject);
        AddJPropertyToJObject(JsonObject,'TableNo',RecRef.NUMBER);
        AddJPropertyToJObject(JsonObject,'TableName',TableName);
        AddJPropertyToJObject(JsonObject,'TableView',TableView);
        AddJPropertyToJObject(JsonObject,'RecordId',RecRef.RECORDID);
        AddJArrayToJObject(JsonObject,'Records',JsonArray);
        AddJObjectToCollection(JsonObject);
        JSON := WriteCollectionToString;
      END;
    END;

    [External]
    PROCEDURE AddRecordFields@1(Variant@1000 : Variant);
    VAR
      JSONMgt@1004 : Codeunit 5459;
      DataTypeMgt@1006 : Codeunit 701;
      RecRef@1001 : RecordRef;
      JsonArray@1005 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      JsonObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF NOT DataTypeMgt.GetRecordRef(Variant, RecRef) THEN
        EXIT;

      WITH JSONMgt DO BEGIN
        InitializeEmptyCollection;
        GetJsonArray(JsonArray);
        InitializeEmptyObject;
        GetJSONObject(JsonObject);
        PopulateJsonFromAnyTable(RecRef,JsonObject);
        AddJObjectToJArray(JsonArray,JsonObject);
        InitializeCollection(JSON);
        InitializeEmptyObject;
        GetJSONObject(JsonObject);
        AddJPropertyToJObject(JsonObject,'TableNo',RecRef.NUMBER);
        AddJPropertyToJObject(JsonObject,'TableName',RecRef.NAME);
        AddJArrayToJObject(JsonObject,'Records',JsonArray);
        AddJObjectToCollection(JsonObject);
        JSON := WriteCollectionToString;
      END;
    END;

    [External]
    PROCEDURE AddVariable@21(VariableName@1000 : Text;Value@1003 : Variant);
    VAR
      JSONMgt@1002 : Codeunit 5459;
    BEGIN
      JSONMgt.AddJPropertyToJObject(Variables,VariableName,Value);
    END;

    [External]
    PROCEDURE GetRecord@7(VAR RecRef@1001 : RecordRef) : Boolean;
    VAR
      JSONMgt@1005 : Codeunit 5459;
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempRecId@1002 : RecordID;
      TableRecordId@1000 : Text;
    BEGIN
      WITH JSONMgt DO BEGIN
        InitializeCollection(JSON);
        IF GetJObjectFromCollectionByPropertyValue(JsonObject,'TableName',RecRef.NAME) THEN
          IF GetStringPropertyValueFromJObjectByName(JsonObject,'RecordId',TableRecordId) THEN
            IF EVALUATE(TempRecId,TableRecordId) THEN BEGIN
              RecRef.GET(TempRecId);
              EXIT(TRUE);
            END;
      END;
    END;

    [External]
    PROCEDURE GetTempTable@10(TableName@1001 : Text;VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      JSONMgt@1004 : Codeunit 5459;
      JsonObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempRecId@1009 : RecordID;
      JSONCollection@1002 : Text;
      TableView@1006 : Text;
      TableRecordId@1007 : Text;
      CollectionIndex@1003 : Integer;
    BEGIN
      IF NOT RecRef.ISTEMPORARY THEN
        EXIT;

      RecRef.RESET;
      RecRef.DELETEALL;

      WITH JSONMgt DO BEGIN
        InitializeCollection(JSON);
        IF GetJObjectFromCollectionByPropertyValue(JsonObject,'TableName',TableName) THEN BEGIN
          GetStringPropertyValueFromJObjectByName(JsonObject,'TableView',TableView);
          GetStringPropertyValueFromJObjectByName(JsonObject,'RecordId',TableRecordId);
          IF GetStringPropertyValueFromJObjectByName(JsonObject,'Records',JSONCollection) THEN BEGIN
            InitializeCollection(JSONCollection);
            FOR CollectionIndex := 1 TO GetCollectionCount DO BEGIN
              GetJObjectFromCollectionByIndex(JsonObject,CollectionIndex - 1);
              PopulateAnyTableFromJson(JsonObject,RecRef);
              RecRef.INSERT;
            END;
          END;
        END;
      END;

      RecRef.SETVIEW(TableView);
    END;

    [External]
    PROCEDURE GetRecordFields@6(VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      JSONMgt@1004 : Codeunit 5459;
      JsonObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JSONCollection@1001 : Text;
      CollectionIndex@1003 : Integer;
    BEGIN
      WITH JSONMgt DO BEGIN
        InitializeCollection(JSON);
        IF GetJObjectFromCollectionByPropertyValue(JsonObject,'TableName',RecRef.NAME) THEN
          IF GetStringPropertyValueFromJObjectByName(JsonObject,'Records',JSONCollection) THEN BEGIN
            InitializeCollection(JSONCollection);
            FOR CollectionIndex := 1 TO GetCollectionCount DO BEGIN
              GetJObjectFromCollectionByIndex(JsonObject,CollectionIndex - 1);
              PopulateAnyTableFromJson(JsonObject,RecRef);
            END;
            EXIT(TRUE);
          END;
      END;
    END;

    [External]
    PROCEDURE GetAsTempBlob@11(VAR TempBlob@1000 : Record 99008535);
    VAR
      JSONMgt@1001 : Codeunit 5459;
      JArray@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      WITH JSONMgt DO BEGIN
        InitializeCollection(JSON);
        GetJsonArray(JArray);
        JArray.AddFirst(Variables);
        JSON := JArray.ToString;
        TempBlob.WriteAsText(JSON,TEXTENCODING::UTF8);
      END;
    END;

    [External]
    PROCEDURE GetVariableValue@22(VAR Value@1000 : Variant;VariableName@1001 : Text) : Boolean;
    VAR
      JSONMgt@1002 : Codeunit 5459;
    BEGIN
      WITH JSONMgt DO BEGIN
        InitializeCollection(JSON);
        IF GetJObjectFromCollectionByIndex(Variables,0) THEN
          EXIT(GetPropertyValueFromJObjectByName(Variables,VariableName,Value));
      END;
    END;

    [External]
    PROCEDURE GetVariableTextValue@23(VAR TextValue@1002 : Text;VariableName@1000 : Text) : Boolean;
    VAR
      Value@1001 : Variant;
    BEGIN
      IF GetVariableValue(Value,VariableName) THEN BEGIN
        TextValue := FORMAT(Value);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE GetVariableBooleanValue@24(VAR BooleanValue@1002 : Boolean;VariableName@1000 : Text) : Boolean;
    VAR
      TextValue@1001 : Text;
    BEGIN
      IF GetVariableTextValue(TextValue,VariableName) THEN
        EXIT(EVALUATE(BooleanValue,TextValue));
    END;

    [External]
    PROCEDURE GetVariableDateValue@25(VAR DateValue@1002 : Date;VariableName@1000 : Text) : Boolean;
    VAR
      TextValue@1001 : Text;
    BEGIN
      IF GetVariableTextValue(TextValue,VariableName) THEN
        EXIT(EVALUATE(DateValue,TextValue));
    END;

    [External]
    PROCEDURE GetVariableDateTimeValue@26(VAR DateTimeValue@1002 : DateTime;VariableName@1000 : Text) : Boolean;
    VAR
      TextValue@1001 : Text;
    BEGIN
      IF GetVariableTextValue(TextValue,VariableName) THEN
        EXIT(EVALUATE(DateTimeValue,TextValue));
    END;

    [External]
    PROCEDURE GetVariableDecimalValue@27(VAR DecimalValue@1002 : Decimal;VariableName@1000 : Text) : Boolean;
    VAR
      TextValue@1001 : Text;
    BEGIN
      IF GetVariableTextValue(TextValue,VariableName) THEN
        EXIT(EVALUATE(DecimalValue,TextValue));
    END;

    [External]
    PROCEDURE GetVariableIntegerValue@28(VAR IntegerValue@1002 : Integer;VariableName@1000 : Text) : Boolean;
    VAR
      TextValue@1001 : Text;
    BEGIN
      IF GetVariableTextValue(TextValue,VariableName) THEN
        EXIT(EVALUATE(IntegerValue,TextValue));
    END;

    [External]
    PROCEDURE GetVariableGUIDValue@29(VAR GuidValue@1002 : GUID;VariableName@1000 : Text) : Boolean;
    VAR
      TextValue@1001 : Text;
    BEGIN
      IF GetVariableTextValue(TextValue,VariableName) THEN
        EXIT(EVALUATE(GuidValue,TextValue));
    END;

    [External]
    PROCEDURE FindInterfaceCodeunit@12(CodeunitName@1000 : Text) : Boolean;
    VAR
      CodeUnitMetadata@1001 : Record 2000000137;
    BEGIN
      CodeUnitMetadata.SETRANGE(Name, CodeunitName);
      EXIT(CodeUnitMetadata.FINDFIRST);
    END;

    [External]
    PROCEDURE GetInterfaceCodeunitID@13(CodeunitName@1000 : Text) : Integer;
    VAR
      CodeUnitMetadata@1001 : Record 2000000137;
    BEGIN
      CodeUnitMetadata.SETRANGE(Name, CodeunitName);
      CodeUnitMetadata.FINDFIRST;
      EXIT(CodeUnitMetadata.ID);
    END;

    [External]
    PROCEDURE ExecuteInterfaceCodeunitIfExists@14(CodeunitName@1000 : Text;VAR TempBlob@1001 : Record 99008535;ErrorIfNotFound@1002 : Text);
    BEGIN
      IF NOT TryExecuteInterfaceCodeunitIfExists(CodeunitName,TempBlob,ErrorIfNotFound) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [External]
    PROCEDURE TryExecuteInterfaceCodeunitIfExists@15(CodeunitName@1000 : Text;VAR TempBlob@1001 : Record 99008535;ErrorIfNotFound@1002 : Text) : Boolean;
    VAR
      CodeUnitMetadata@1004 : Record 2000000137;
    BEGIN
      CodeUnitMetadata.SETRANGE(Name, CodeunitName);
      IF CodeUnitMetadata.FINDFIRST THEN
        EXIT(CODEUNIT.RUN(CodeUnitMetadata.ID,TempBlob))
      ELSE
        IF ErrorIfNotFound <> '' THEN
          ERROR(ErrorIfNotFound);
    END;

    [External]
    PROCEDURE TryExecuteCodeunitIfExists@17(CodeunitName@1000 : Text;ErrorIfNotFound@1002 : Text) : Boolean;
    VAR
      CodeUnitMetadata@1004 : Record 2000000137;
    BEGIN
      CodeUnitMetadata.SETRANGE(Name, CodeunitName);
      IF CodeUnitMetadata.FINDFIRST THEN
        EXIT(CODEUNIT.RUN(CodeUnitMetadata.ID))
      ELSE
        IF ErrorIfNotFound <> '' THEN
          ERROR(ErrorIfNotFound);
    END;

    LOCAL PROCEDURE PopulateAnyTableFromJson@57(JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR RecRef@1001 : RecordRef);
    VAR
      Field@10017208 : Record 2000000041;
      JSONMgt@10017206 : Codeunit 5459;
      FldRef@10017205 : FieldRef;
      FldIndex@10017204 : Integer;
    BEGIN
      WITH JSONMgt DO BEGIN
        FOR FldIndex := 1 TO RecRef.FIELDCOUNT DO BEGIN
          FldRef := RecRef.FIELDINDEX(FldIndex);
          Field.GET(RecRef.NUMBER,FldRef.NUMBER);
          IF Field.Class = Field.Class::Normal THEN
            GetPropertyValueFromJObjectByPathSetToFieldRef(JsonObject,RemoveNonAplhaNumericCharacters(FldRef.NAME),FldRef);
        END;
      END;
    END;

    LOCAL PROCEDURE PopulateJsonFromAnyTable@58(RecRef@1000 : RecordRef;VAR JsonObject@10017201 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      TempBlob@10018400 : Record 99008535;
      Field@10017209 : Record 2000000041;
      JSONMgt@10017207 : Codeunit 5459;
      FldRef@10017204 : FieldRef;
      FldIndex@10017203 : Integer;
    BEGIN
      WITH JSONMgt DO BEGIN
        InitializeEmptyObject;
        GetJSONObject(JsonObject);
        FOR FldIndex := 1 TO RecRef.FIELDCOUNT DO BEGIN
          FldRef := RecRef.FIELDINDEX(FldIndex);
          Field.GET(RecRef.NUMBER,FldRef.NUMBER);
          IF Field.Class = Field.Class::Normal THEN
            IF FORMAT(FldRef.TYPE) = 'BLOB' THEN BEGIN
              TempBlob.Blob := FldRef.VALUE;
              AddJPropertyToJObject(JsonObject,RemoveNonAplhaNumericCharacters(FldRef.NAME),TempBlob.ToBase64String);
            END ELSE
              AddJPropertyToJObject(JsonObject,RemoveNonAplhaNumericCharacters(FldRef.NAME),FldRef.VALUE);
        END;
      END;
    END;

    LOCAL PROCEDURE RemoveNonAplhaNumericCharacters@59(OldValue@1003 : Text) : Text;
    VAR
      DotNetChar@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
      NewValue@1001 : Text;
      I@1000 : Integer;
    BEGIN
      NewValue := '';
      FOR I := 1 TO STRLEN(OldValue) DO BEGIN
        IF DotNetChar.IsLetterOrDigit(OldValue[I]) THEN
          NewValue += FORMAT(OldValue[I]);
      END;

      EXIT(NewValue);
    END;

    BEGIN
    END.
  }
}

